// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review/dal/model"
)

func newTbUser(db *gorm.DB, opts ...gen.DOOption) tbUser {
	_tbUser := tbUser{}

	_tbUser.tbUserDo.UseDB(db, opts...)
	_tbUser.tbUserDo.UseModel(&model.TbUser{})

	tableName := _tbUser.tbUserDo.TableName()
	_tbUser.ALL = field.NewAsterisk(tableName)
	_tbUser.ID = field.NewUint64(tableName, "id")
	_tbUser.Phone = field.NewString(tableName, "phone")
	_tbUser.Password = field.NewString(tableName, "password")
	_tbUser.NickName = field.NewString(tableName, "nick_name")
	_tbUser.Icon = field.NewString(tableName, "icon")
	_tbUser.CreateTime = field.NewTime(tableName, "create_time")
	_tbUser.UpdateTime = field.NewTime(tableName, "update_time")

	_tbUser.fillFieldMap()

	return _tbUser
}

type tbUser struct {
	tbUserDo

	ALL        field.Asterisk
	ID         field.Uint64 // 主键
	Phone      field.String // 手机号码
	Password   field.String // 密码，加密存储
	NickName   field.String // 昵称，默认是用户id
	Icon       field.String // 人物头像
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbUser) Table(newTableName string) *tbUser {
	t.tbUserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbUser) As(alias string) *tbUser {
	t.tbUserDo.DO = *(t.tbUserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbUser) updateTableName(table string) *tbUser {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.Phone = field.NewString(table, "phone")
	t.Password = field.NewString(table, "password")
	t.NickName = field.NewString(table, "nick_name")
	t.Icon = field.NewString(table, "icon")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbUser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["password"] = t.Password
	t.fieldMap["nick_name"] = t.NickName
	t.fieldMap["icon"] = t.Icon
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbUser) clone(db *gorm.DB) tbUser {
	t.tbUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbUser) replaceDB(db *gorm.DB) tbUser {
	t.tbUserDo.ReplaceDB(db)
	return t
}

type tbUserDo struct{ gen.DO }

type ITbUserDo interface {
	gen.SubQuery
	Debug() ITbUserDo
	WithContext(ctx context.Context) ITbUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbUserDo
	WriteDB() ITbUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbUserDo
	Not(conds ...gen.Condition) ITbUserDo
	Or(conds ...gen.Condition) ITbUserDo
	Select(conds ...field.Expr) ITbUserDo
	Where(conds ...gen.Condition) ITbUserDo
	Order(conds ...field.Expr) ITbUserDo
	Distinct(cols ...field.Expr) ITbUserDo
	Omit(cols ...field.Expr) ITbUserDo
	Join(table schema.Tabler, on ...field.Expr) ITbUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbUserDo
	Group(cols ...field.Expr) ITbUserDo
	Having(conds ...gen.Condition) ITbUserDo
	Limit(limit int) ITbUserDo
	Offset(offset int) ITbUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserDo
	Unscoped() ITbUserDo
	Create(values ...*model.TbUser) error
	CreateInBatches(values []*model.TbUser, batchSize int) error
	Save(values ...*model.TbUser) error
	First() (*model.TbUser, error)
	Take() (*model.TbUser, error)
	Last() (*model.TbUser, error)
	Find() ([]*model.TbUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbUser, err error)
	FindInBatches(result *[]*model.TbUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbUserDo
	Assign(attrs ...field.AssignExpr) ITbUserDo
	Joins(fields ...field.RelationField) ITbUserDo
	Preload(fields ...field.RelationField) ITbUserDo
	FirstOrInit() (*model.TbUser, error)
	FirstOrCreate() (*model.TbUser, error)
	FindByPage(offset int, limit int) (result []*model.TbUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbUserDo) Debug() ITbUserDo {
	return t.withDO(t.DO.Debug())
}

func (t tbUserDo) WithContext(ctx context.Context) ITbUserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbUserDo) ReadDB() ITbUserDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbUserDo) WriteDB() ITbUserDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbUserDo) Session(config *gorm.Session) ITbUserDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbUserDo) Clauses(conds ...clause.Expression) ITbUserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbUserDo) Returning(value interface{}, columns ...string) ITbUserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbUserDo) Not(conds ...gen.Condition) ITbUserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbUserDo) Or(conds ...gen.Condition) ITbUserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbUserDo) Select(conds ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbUserDo) Where(conds ...gen.Condition) ITbUserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbUserDo) Order(conds ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbUserDo) Distinct(cols ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbUserDo) Omit(cols ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbUserDo) Join(table schema.Tabler, on ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbUserDo) Group(cols ...field.Expr) ITbUserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbUserDo) Having(conds ...gen.Condition) ITbUserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbUserDo) Limit(limit int) ITbUserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbUserDo) Offset(offset int) ITbUserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbUserDo) Unscoped() ITbUserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbUserDo) Create(values ...*model.TbUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbUserDo) CreateInBatches(values []*model.TbUser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbUserDo) Save(values ...*model.TbUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbUserDo) First() (*model.TbUser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUser), nil
	}
}

func (t tbUserDo) Take() (*model.TbUser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUser), nil
	}
}

func (t tbUserDo) Last() (*model.TbUser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUser), nil
	}
}

func (t tbUserDo) Find() ([]*model.TbUser, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbUser), err
}

func (t tbUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbUser, err error) {
	buf := make([]*model.TbUser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbUserDo) FindInBatches(result *[]*model.TbUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbUserDo) Attrs(attrs ...field.AssignExpr) ITbUserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbUserDo) Assign(attrs ...field.AssignExpr) ITbUserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbUserDo) Joins(fields ...field.RelationField) ITbUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbUserDo) Preload(fields ...field.RelationField) ITbUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbUserDo) FirstOrInit() (*model.TbUser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUser), nil
	}
}

func (t tbUserDo) FirstOrCreate() (*model.TbUser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUser), nil
	}
}

func (t tbUserDo) FindByPage(offset int, limit int) (result []*model.TbUser, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbUserDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbUserDo) Delete(models ...*model.TbUser) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbUserDo) withDO(do gen.Dao) *tbUserDo {
	t.DO = *do.(*gen.DO)
	return t
}
