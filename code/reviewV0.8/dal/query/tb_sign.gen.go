// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review/dal/model"
)

func newTbSign(db *gorm.DB, opts ...gen.DOOption) tbSign {
	_tbSign := tbSign{}

	_tbSign.tbSignDo.UseDB(db, opts...)
	_tbSign.tbSignDo.UseModel(&model.TbSign{})

	tableName := _tbSign.tbSignDo.TableName()
	_tbSign.ALL = field.NewAsterisk(tableName)
	_tbSign.ID = field.NewUint64(tableName, "id")
	_tbSign.UserID = field.NewUint64(tableName, "user_id")
	_tbSign.Year = field.NewInt32(tableName, "year")
	_tbSign.Month = field.NewInt32(tableName, "month")
	_tbSign.Date = field.NewTime(tableName, "date")
	_tbSign.IsBackup = field.NewUint32(tableName, "is_backup")

	_tbSign.fillFieldMap()

	return _tbSign
}

type tbSign struct {
	tbSignDo

	ALL      field.Asterisk
	ID       field.Uint64 // 主键
	UserID   field.Uint64 // 用户id
	Year     field.Int32  // 签到的年
	Month    field.Int32  // 签到的月
	Date     field.Time   // 签到的日期
	IsBackup field.Uint32 // 是否补签

	fieldMap map[string]field.Expr
}

func (t tbSign) Table(newTableName string) *tbSign {
	t.tbSignDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbSign) As(alias string) *tbSign {
	t.tbSignDo.DO = *(t.tbSignDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbSign) updateTableName(table string) *tbSign {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.UserID = field.NewUint64(table, "user_id")
	t.Year = field.NewInt32(table, "year")
	t.Month = field.NewInt32(table, "month")
	t.Date = field.NewTime(table, "date")
	t.IsBackup = field.NewUint32(table, "is_backup")

	t.fillFieldMap()

	return t
}

func (t *tbSign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbSign) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["year"] = t.Year
	t.fieldMap["month"] = t.Month
	t.fieldMap["date"] = t.Date
	t.fieldMap["is_backup"] = t.IsBackup
}

func (t tbSign) clone(db *gorm.DB) tbSign {
	t.tbSignDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbSign) replaceDB(db *gorm.DB) tbSign {
	t.tbSignDo.ReplaceDB(db)
	return t
}

type tbSignDo struct{ gen.DO }

type ITbSignDo interface {
	gen.SubQuery
	Debug() ITbSignDo
	WithContext(ctx context.Context) ITbSignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbSignDo
	WriteDB() ITbSignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbSignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbSignDo
	Not(conds ...gen.Condition) ITbSignDo
	Or(conds ...gen.Condition) ITbSignDo
	Select(conds ...field.Expr) ITbSignDo
	Where(conds ...gen.Condition) ITbSignDo
	Order(conds ...field.Expr) ITbSignDo
	Distinct(cols ...field.Expr) ITbSignDo
	Omit(cols ...field.Expr) ITbSignDo
	Join(table schema.Tabler, on ...field.Expr) ITbSignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbSignDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbSignDo
	Group(cols ...field.Expr) ITbSignDo
	Having(conds ...gen.Condition) ITbSignDo
	Limit(limit int) ITbSignDo
	Offset(offset int) ITbSignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbSignDo
	Unscoped() ITbSignDo
	Create(values ...*model.TbSign) error
	CreateInBatches(values []*model.TbSign, batchSize int) error
	Save(values ...*model.TbSign) error
	First() (*model.TbSign, error)
	Take() (*model.TbSign, error)
	Last() (*model.TbSign, error)
	Find() ([]*model.TbSign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbSign, err error)
	FindInBatches(result *[]*model.TbSign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbSign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbSignDo
	Assign(attrs ...field.AssignExpr) ITbSignDo
	Joins(fields ...field.RelationField) ITbSignDo
	Preload(fields ...field.RelationField) ITbSignDo
	FirstOrInit() (*model.TbSign, error)
	FirstOrCreate() (*model.TbSign, error)
	FindByPage(offset int, limit int) (result []*model.TbSign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbSignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbSignDo) Debug() ITbSignDo {
	return t.withDO(t.DO.Debug())
}

func (t tbSignDo) WithContext(ctx context.Context) ITbSignDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbSignDo) ReadDB() ITbSignDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbSignDo) WriteDB() ITbSignDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbSignDo) Session(config *gorm.Session) ITbSignDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbSignDo) Clauses(conds ...clause.Expression) ITbSignDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbSignDo) Returning(value interface{}, columns ...string) ITbSignDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbSignDo) Not(conds ...gen.Condition) ITbSignDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbSignDo) Or(conds ...gen.Condition) ITbSignDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbSignDo) Select(conds ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbSignDo) Where(conds ...gen.Condition) ITbSignDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbSignDo) Order(conds ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbSignDo) Distinct(cols ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbSignDo) Omit(cols ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbSignDo) Join(table schema.Tabler, on ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbSignDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbSignDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbSignDo) Group(cols ...field.Expr) ITbSignDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbSignDo) Having(conds ...gen.Condition) ITbSignDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbSignDo) Limit(limit int) ITbSignDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbSignDo) Offset(offset int) ITbSignDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbSignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbSignDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbSignDo) Unscoped() ITbSignDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbSignDo) Create(values ...*model.TbSign) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbSignDo) CreateInBatches(values []*model.TbSign, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbSignDo) Save(values ...*model.TbSign) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbSignDo) First() (*model.TbSign, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSign), nil
	}
}

func (t tbSignDo) Take() (*model.TbSign, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSign), nil
	}
}

func (t tbSignDo) Last() (*model.TbSign, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSign), nil
	}
}

func (t tbSignDo) Find() ([]*model.TbSign, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbSign), err
}

func (t tbSignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbSign, err error) {
	buf := make([]*model.TbSign, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbSignDo) FindInBatches(result *[]*model.TbSign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbSignDo) Attrs(attrs ...field.AssignExpr) ITbSignDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbSignDo) Assign(attrs ...field.AssignExpr) ITbSignDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbSignDo) Joins(fields ...field.RelationField) ITbSignDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbSignDo) Preload(fields ...field.RelationField) ITbSignDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbSignDo) FirstOrInit() (*model.TbSign, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSign), nil
	}
}

func (t tbSignDo) FirstOrCreate() (*model.TbSign, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSign), nil
	}
}

func (t tbSignDo) FindByPage(offset int, limit int) (result []*model.TbSign, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbSignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbSignDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbSignDo) Delete(models ...*model.TbSign) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbSignDo) withDO(do gen.Dao) *tbSignDo {
	t.DO = *do.(*gen.DO)
	return t
}
