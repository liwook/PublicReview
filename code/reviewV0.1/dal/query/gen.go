// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	TbBlog           *tbBlog
	TbBlogComment    *tbBlogComment
	TbFollow         *tbFollow
	TbSeckillVoucher *tbSeckillVoucher
	TbShop           *tbShop
	TbShopType       *tbShopType
	TbSign           *tbSign
	TbUser           *tbUser
	TbUserInfo       *tbUserInfo
	TbVoucher        *tbVoucher
	TbVoucherOrder   *tbVoucherOrder
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	TbBlog = &Q.TbBlog
	TbBlogComment = &Q.TbBlogComment
	TbFollow = &Q.TbFollow
	TbSeckillVoucher = &Q.TbSeckillVoucher
	TbShop = &Q.TbShop
	TbShopType = &Q.TbShopType
	TbSign = &Q.TbSign
	TbUser = &Q.TbUser
	TbUserInfo = &Q.TbUserInfo
	TbVoucher = &Q.TbVoucher
	TbVoucherOrder = &Q.TbVoucherOrder
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		TbBlog:           newTbBlog(db, opts...),
		TbBlogComment:    newTbBlogComment(db, opts...),
		TbFollow:         newTbFollow(db, opts...),
		TbSeckillVoucher: newTbSeckillVoucher(db, opts...),
		TbShop:           newTbShop(db, opts...),
		TbShopType:       newTbShopType(db, opts...),
		TbSign:           newTbSign(db, opts...),
		TbUser:           newTbUser(db, opts...),
		TbUserInfo:       newTbUserInfo(db, opts...),
		TbVoucher:        newTbVoucher(db, opts...),
		TbVoucherOrder:   newTbVoucherOrder(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TbBlog           tbBlog
	TbBlogComment    tbBlogComment
	TbFollow         tbFollow
	TbSeckillVoucher tbSeckillVoucher
	TbShop           tbShop
	TbShopType       tbShopType
	TbSign           tbSign
	TbUser           tbUser
	TbUserInfo       tbUserInfo
	TbVoucher        tbVoucher
	TbVoucherOrder   tbVoucherOrder
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		TbBlog:           q.TbBlog.clone(db),
		TbBlogComment:    q.TbBlogComment.clone(db),
		TbFollow:         q.TbFollow.clone(db),
		TbSeckillVoucher: q.TbSeckillVoucher.clone(db),
		TbShop:           q.TbShop.clone(db),
		TbShopType:       q.TbShopType.clone(db),
		TbSign:           q.TbSign.clone(db),
		TbUser:           q.TbUser.clone(db),
		TbUserInfo:       q.TbUserInfo.clone(db),
		TbVoucher:        q.TbVoucher.clone(db),
		TbVoucherOrder:   q.TbVoucherOrder.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		TbBlog:           q.TbBlog.replaceDB(db),
		TbBlogComment:    q.TbBlogComment.replaceDB(db),
		TbFollow:         q.TbFollow.replaceDB(db),
		TbSeckillVoucher: q.TbSeckillVoucher.replaceDB(db),
		TbShop:           q.TbShop.replaceDB(db),
		TbShopType:       q.TbShopType.replaceDB(db),
		TbSign:           q.TbSign.replaceDB(db),
		TbUser:           q.TbUser.replaceDB(db),
		TbUserInfo:       q.TbUserInfo.replaceDB(db),
		TbVoucher:        q.TbVoucher.replaceDB(db),
		TbVoucherOrder:   q.TbVoucherOrder.replaceDB(db),
	}
}

type queryCtx struct {
	TbBlog           ITbBlogDo
	TbBlogComment    ITbBlogCommentDo
	TbFollow         ITbFollowDo
	TbSeckillVoucher ITbSeckillVoucherDo
	TbShop           ITbShopDo
	TbShopType       ITbShopTypeDo
	TbSign           ITbSignDo
	TbUser           ITbUserDo
	TbUserInfo       ITbUserInfoDo
	TbVoucher        ITbVoucherDo
	TbVoucherOrder   ITbVoucherOrderDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TbBlog:           q.TbBlog.WithContext(ctx),
		TbBlogComment:    q.TbBlogComment.WithContext(ctx),
		TbFollow:         q.TbFollow.WithContext(ctx),
		TbSeckillVoucher: q.TbSeckillVoucher.WithContext(ctx),
		TbShop:           q.TbShop.WithContext(ctx),
		TbShopType:       q.TbShopType.WithContext(ctx),
		TbSign:           q.TbSign.WithContext(ctx),
		TbUser:           q.TbUser.WithContext(ctx),
		TbUserInfo:       q.TbUserInfo.WithContext(ctx),
		TbVoucher:        q.TbVoucher.WithContext(ctx),
		TbVoucherOrder:   q.TbVoucherOrder.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
