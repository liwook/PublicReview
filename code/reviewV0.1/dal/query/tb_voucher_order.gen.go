// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review/dal/model"
)

func newTbVoucherOrder(db *gorm.DB, opts ...gen.DOOption) tbVoucherOrder {
	_tbVoucherOrder := tbVoucherOrder{}

	_tbVoucherOrder.tbVoucherOrderDo.UseDB(db, opts...)
	_tbVoucherOrder.tbVoucherOrderDo.UseModel(&model.TbVoucherOrder{})

	tableName := _tbVoucherOrder.tbVoucherOrderDo.TableName()
	_tbVoucherOrder.ALL = field.NewAsterisk(tableName)
	_tbVoucherOrder.ID = field.NewInt64(tableName, "id")
	_tbVoucherOrder.UserID = field.NewUint64(tableName, "user_id")
	_tbVoucherOrder.VoucherID = field.NewUint64(tableName, "voucher_id")
	_tbVoucherOrder.PayType = field.NewUint32(tableName, "pay_type")
	_tbVoucherOrder.Status = field.NewUint32(tableName, "status")
	_tbVoucherOrder.CreateTime = field.NewTime(tableName, "create_time")
	_tbVoucherOrder.PayTime = field.NewTime(tableName, "pay_time")
	_tbVoucherOrder.UseTime = field.NewTime(tableName, "use_time")
	_tbVoucherOrder.RefundTime = field.NewTime(tableName, "refund_time")
	_tbVoucherOrder.UpdateTime = field.NewTime(tableName, "update_time")

	_tbVoucherOrder.fillFieldMap()

	return _tbVoucherOrder
}

type tbVoucherOrder struct {
	tbVoucherOrderDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	UserID     field.Uint64 // 下单的用户id
	VoucherID  field.Uint64 // 购买的代金券id
	PayType    field.Uint32 // 支付方式 1：余额支付；2：支付宝；3：微信
	Status     field.Uint32 // 订单状态，1：未支付；2：已支付；3：已核销；4：已取消；5：退款中；6：已退款
	CreateTime field.Time   // 下单时间
	PayTime    field.Time   // 支付时间
	UseTime    field.Time   // 核销时间
	RefundTime field.Time   // 退款时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbVoucherOrder) Table(newTableName string) *tbVoucherOrder {
	t.tbVoucherOrderDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbVoucherOrder) As(alias string) *tbVoucherOrder {
	t.tbVoucherOrderDo.DO = *(t.tbVoucherOrderDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbVoucherOrder) updateTableName(table string) *tbVoucherOrder {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UserID = field.NewUint64(table, "user_id")
	t.VoucherID = field.NewUint64(table, "voucher_id")
	t.PayType = field.NewUint32(table, "pay_type")
	t.Status = field.NewUint32(table, "status")
	t.CreateTime = field.NewTime(table, "create_time")
	t.PayTime = field.NewTime(table, "pay_time")
	t.UseTime = field.NewTime(table, "use_time")
	t.RefundTime = field.NewTime(table, "refund_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbVoucherOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbVoucherOrder) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["voucher_id"] = t.VoucherID
	t.fieldMap["pay_type"] = t.PayType
	t.fieldMap["status"] = t.Status
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["pay_time"] = t.PayTime
	t.fieldMap["use_time"] = t.UseTime
	t.fieldMap["refund_time"] = t.RefundTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbVoucherOrder) clone(db *gorm.DB) tbVoucherOrder {
	t.tbVoucherOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbVoucherOrder) replaceDB(db *gorm.DB) tbVoucherOrder {
	t.tbVoucherOrderDo.ReplaceDB(db)
	return t
}

type tbVoucherOrderDo struct{ gen.DO }

type ITbVoucherOrderDo interface {
	gen.SubQuery
	Debug() ITbVoucherOrderDo
	WithContext(ctx context.Context) ITbVoucherOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbVoucherOrderDo
	WriteDB() ITbVoucherOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbVoucherOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbVoucherOrderDo
	Not(conds ...gen.Condition) ITbVoucherOrderDo
	Or(conds ...gen.Condition) ITbVoucherOrderDo
	Select(conds ...field.Expr) ITbVoucherOrderDo
	Where(conds ...gen.Condition) ITbVoucherOrderDo
	Order(conds ...field.Expr) ITbVoucherOrderDo
	Distinct(cols ...field.Expr) ITbVoucherOrderDo
	Omit(cols ...field.Expr) ITbVoucherOrderDo
	Join(table schema.Tabler, on ...field.Expr) ITbVoucherOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbVoucherOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbVoucherOrderDo
	Group(cols ...field.Expr) ITbVoucherOrderDo
	Having(conds ...gen.Condition) ITbVoucherOrderDo
	Limit(limit int) ITbVoucherOrderDo
	Offset(offset int) ITbVoucherOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbVoucherOrderDo
	Unscoped() ITbVoucherOrderDo
	Create(values ...*model.TbVoucherOrder) error
	CreateInBatches(values []*model.TbVoucherOrder, batchSize int) error
	Save(values ...*model.TbVoucherOrder) error
	First() (*model.TbVoucherOrder, error)
	Take() (*model.TbVoucherOrder, error)
	Last() (*model.TbVoucherOrder, error)
	Find() ([]*model.TbVoucherOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbVoucherOrder, err error)
	FindInBatches(result *[]*model.TbVoucherOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbVoucherOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbVoucherOrderDo
	Assign(attrs ...field.AssignExpr) ITbVoucherOrderDo
	Joins(fields ...field.RelationField) ITbVoucherOrderDo
	Preload(fields ...field.RelationField) ITbVoucherOrderDo
	FirstOrInit() (*model.TbVoucherOrder, error)
	FirstOrCreate() (*model.TbVoucherOrder, error)
	FindByPage(offset int, limit int) (result []*model.TbVoucherOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbVoucherOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbVoucherOrderDo) Debug() ITbVoucherOrderDo {
	return t.withDO(t.DO.Debug())
}

func (t tbVoucherOrderDo) WithContext(ctx context.Context) ITbVoucherOrderDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbVoucherOrderDo) ReadDB() ITbVoucherOrderDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbVoucherOrderDo) WriteDB() ITbVoucherOrderDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbVoucherOrderDo) Session(config *gorm.Session) ITbVoucherOrderDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbVoucherOrderDo) Clauses(conds ...clause.Expression) ITbVoucherOrderDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbVoucherOrderDo) Returning(value interface{}, columns ...string) ITbVoucherOrderDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbVoucherOrderDo) Not(conds ...gen.Condition) ITbVoucherOrderDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbVoucherOrderDo) Or(conds ...gen.Condition) ITbVoucherOrderDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbVoucherOrderDo) Select(conds ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbVoucherOrderDo) Where(conds ...gen.Condition) ITbVoucherOrderDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbVoucherOrderDo) Order(conds ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbVoucherOrderDo) Distinct(cols ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbVoucherOrderDo) Omit(cols ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbVoucherOrderDo) Join(table schema.Tabler, on ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbVoucherOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbVoucherOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbVoucherOrderDo) Group(cols ...field.Expr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbVoucherOrderDo) Having(conds ...gen.Condition) ITbVoucherOrderDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbVoucherOrderDo) Limit(limit int) ITbVoucherOrderDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbVoucherOrderDo) Offset(offset int) ITbVoucherOrderDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbVoucherOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbVoucherOrderDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbVoucherOrderDo) Unscoped() ITbVoucherOrderDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbVoucherOrderDo) Create(values ...*model.TbVoucherOrder) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbVoucherOrderDo) CreateInBatches(values []*model.TbVoucherOrder, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbVoucherOrderDo) Save(values ...*model.TbVoucherOrder) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbVoucherOrderDo) First() (*model.TbVoucherOrder, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucherOrder), nil
	}
}

func (t tbVoucherOrderDo) Take() (*model.TbVoucherOrder, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucherOrder), nil
	}
}

func (t tbVoucherOrderDo) Last() (*model.TbVoucherOrder, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucherOrder), nil
	}
}

func (t tbVoucherOrderDo) Find() ([]*model.TbVoucherOrder, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbVoucherOrder), err
}

func (t tbVoucherOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbVoucherOrder, err error) {
	buf := make([]*model.TbVoucherOrder, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbVoucherOrderDo) FindInBatches(result *[]*model.TbVoucherOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbVoucherOrderDo) Attrs(attrs ...field.AssignExpr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbVoucherOrderDo) Assign(attrs ...field.AssignExpr) ITbVoucherOrderDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbVoucherOrderDo) Joins(fields ...field.RelationField) ITbVoucherOrderDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbVoucherOrderDo) Preload(fields ...field.RelationField) ITbVoucherOrderDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbVoucherOrderDo) FirstOrInit() (*model.TbVoucherOrder, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucherOrder), nil
	}
}

func (t tbVoucherOrderDo) FirstOrCreate() (*model.TbVoucherOrder, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucherOrder), nil
	}
}

func (t tbVoucherOrderDo) FindByPage(offset int, limit int) (result []*model.TbVoucherOrder, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbVoucherOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbVoucherOrderDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbVoucherOrderDo) Delete(models ...*model.TbVoucherOrder) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbVoucherOrderDo) withDO(do gen.Dao) *tbVoucherOrderDo {
	t.DO = *do.(*gen.DO)
	return t
}
