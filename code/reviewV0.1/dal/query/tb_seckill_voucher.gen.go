// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review/dal/model"
)

func newTbSeckillVoucher(db *gorm.DB, opts ...gen.DOOption) tbSeckillVoucher {
	_tbSeckillVoucher := tbSeckillVoucher{}

	_tbSeckillVoucher.tbSeckillVoucherDo.UseDB(db, opts...)
	_tbSeckillVoucher.tbSeckillVoucherDo.UseModel(&model.TbSeckillVoucher{})

	tableName := _tbSeckillVoucher.tbSeckillVoucherDo.TableName()
	_tbSeckillVoucher.ALL = field.NewAsterisk(tableName)
	_tbSeckillVoucher.VoucherID = field.NewUint64(tableName, "voucher_id")
	_tbSeckillVoucher.Stock = field.NewInt32(tableName, "stock")
	_tbSeckillVoucher.CreateTime = field.NewTime(tableName, "create_time")
	_tbSeckillVoucher.BeginTime = field.NewTime(tableName, "begin_time")
	_tbSeckillVoucher.EndTime = field.NewTime(tableName, "end_time")
	_tbSeckillVoucher.UpdateTime = field.NewTime(tableName, "update_time")

	_tbSeckillVoucher.fillFieldMap()

	return _tbSeckillVoucher
}

// tbSeckillVoucher 秒杀优惠券表，与优惠券是一对一关系
type tbSeckillVoucher struct {
	tbSeckillVoucherDo

	ALL        field.Asterisk
	VoucherID  field.Uint64 // 关联的优惠券的id
	Stock      field.Int32  // 库存
	CreateTime field.Time   // 创建时间
	BeginTime  field.Time   // 生效时间
	EndTime    field.Time   // 失效时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbSeckillVoucher) Table(newTableName string) *tbSeckillVoucher {
	t.tbSeckillVoucherDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbSeckillVoucher) As(alias string) *tbSeckillVoucher {
	t.tbSeckillVoucherDo.DO = *(t.tbSeckillVoucherDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbSeckillVoucher) updateTableName(table string) *tbSeckillVoucher {
	t.ALL = field.NewAsterisk(table)
	t.VoucherID = field.NewUint64(table, "voucher_id")
	t.Stock = field.NewInt32(table, "stock")
	t.CreateTime = field.NewTime(table, "create_time")
	t.BeginTime = field.NewTime(table, "begin_time")
	t.EndTime = field.NewTime(table, "end_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbSeckillVoucher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbSeckillVoucher) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["voucher_id"] = t.VoucherID
	t.fieldMap["stock"] = t.Stock
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["begin_time"] = t.BeginTime
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbSeckillVoucher) clone(db *gorm.DB) tbSeckillVoucher {
	t.tbSeckillVoucherDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbSeckillVoucher) replaceDB(db *gorm.DB) tbSeckillVoucher {
	t.tbSeckillVoucherDo.ReplaceDB(db)
	return t
}

type tbSeckillVoucherDo struct{ gen.DO }

type ITbSeckillVoucherDo interface {
	gen.SubQuery
	Debug() ITbSeckillVoucherDo
	WithContext(ctx context.Context) ITbSeckillVoucherDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbSeckillVoucherDo
	WriteDB() ITbSeckillVoucherDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbSeckillVoucherDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbSeckillVoucherDo
	Not(conds ...gen.Condition) ITbSeckillVoucherDo
	Or(conds ...gen.Condition) ITbSeckillVoucherDo
	Select(conds ...field.Expr) ITbSeckillVoucherDo
	Where(conds ...gen.Condition) ITbSeckillVoucherDo
	Order(conds ...field.Expr) ITbSeckillVoucherDo
	Distinct(cols ...field.Expr) ITbSeckillVoucherDo
	Omit(cols ...field.Expr) ITbSeckillVoucherDo
	Join(table schema.Tabler, on ...field.Expr) ITbSeckillVoucherDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbSeckillVoucherDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbSeckillVoucherDo
	Group(cols ...field.Expr) ITbSeckillVoucherDo
	Having(conds ...gen.Condition) ITbSeckillVoucherDo
	Limit(limit int) ITbSeckillVoucherDo
	Offset(offset int) ITbSeckillVoucherDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbSeckillVoucherDo
	Unscoped() ITbSeckillVoucherDo
	Create(values ...*model.TbSeckillVoucher) error
	CreateInBatches(values []*model.TbSeckillVoucher, batchSize int) error
	Save(values ...*model.TbSeckillVoucher) error
	First() (*model.TbSeckillVoucher, error)
	Take() (*model.TbSeckillVoucher, error)
	Last() (*model.TbSeckillVoucher, error)
	Find() ([]*model.TbSeckillVoucher, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbSeckillVoucher, err error)
	FindInBatches(result *[]*model.TbSeckillVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbSeckillVoucher) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbSeckillVoucherDo
	Assign(attrs ...field.AssignExpr) ITbSeckillVoucherDo
	Joins(fields ...field.RelationField) ITbSeckillVoucherDo
	Preload(fields ...field.RelationField) ITbSeckillVoucherDo
	FirstOrInit() (*model.TbSeckillVoucher, error)
	FirstOrCreate() (*model.TbSeckillVoucher, error)
	FindByPage(offset int, limit int) (result []*model.TbSeckillVoucher, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbSeckillVoucherDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbSeckillVoucherDo) Debug() ITbSeckillVoucherDo {
	return t.withDO(t.DO.Debug())
}

func (t tbSeckillVoucherDo) WithContext(ctx context.Context) ITbSeckillVoucherDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbSeckillVoucherDo) ReadDB() ITbSeckillVoucherDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbSeckillVoucherDo) WriteDB() ITbSeckillVoucherDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbSeckillVoucherDo) Session(config *gorm.Session) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbSeckillVoucherDo) Clauses(conds ...clause.Expression) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbSeckillVoucherDo) Returning(value interface{}, columns ...string) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbSeckillVoucherDo) Not(conds ...gen.Condition) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbSeckillVoucherDo) Or(conds ...gen.Condition) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbSeckillVoucherDo) Select(conds ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbSeckillVoucherDo) Where(conds ...gen.Condition) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbSeckillVoucherDo) Order(conds ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbSeckillVoucherDo) Distinct(cols ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbSeckillVoucherDo) Omit(cols ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbSeckillVoucherDo) Join(table schema.Tabler, on ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbSeckillVoucherDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbSeckillVoucherDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbSeckillVoucherDo) Group(cols ...field.Expr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbSeckillVoucherDo) Having(conds ...gen.Condition) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbSeckillVoucherDo) Limit(limit int) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbSeckillVoucherDo) Offset(offset int) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbSeckillVoucherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbSeckillVoucherDo) Unscoped() ITbSeckillVoucherDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbSeckillVoucherDo) Create(values ...*model.TbSeckillVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbSeckillVoucherDo) CreateInBatches(values []*model.TbSeckillVoucher, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbSeckillVoucherDo) Save(values ...*model.TbSeckillVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbSeckillVoucherDo) First() (*model.TbSeckillVoucher, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSeckillVoucher), nil
	}
}

func (t tbSeckillVoucherDo) Take() (*model.TbSeckillVoucher, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSeckillVoucher), nil
	}
}

func (t tbSeckillVoucherDo) Last() (*model.TbSeckillVoucher, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSeckillVoucher), nil
	}
}

func (t tbSeckillVoucherDo) Find() ([]*model.TbSeckillVoucher, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbSeckillVoucher), err
}

func (t tbSeckillVoucherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbSeckillVoucher, err error) {
	buf := make([]*model.TbSeckillVoucher, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbSeckillVoucherDo) FindInBatches(result *[]*model.TbSeckillVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbSeckillVoucherDo) Attrs(attrs ...field.AssignExpr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbSeckillVoucherDo) Assign(attrs ...field.AssignExpr) ITbSeckillVoucherDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbSeckillVoucherDo) Joins(fields ...field.RelationField) ITbSeckillVoucherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbSeckillVoucherDo) Preload(fields ...field.RelationField) ITbSeckillVoucherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbSeckillVoucherDo) FirstOrInit() (*model.TbSeckillVoucher, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSeckillVoucher), nil
	}
}

func (t tbSeckillVoucherDo) FirstOrCreate() (*model.TbSeckillVoucher, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbSeckillVoucher), nil
	}
}

func (t tbSeckillVoucherDo) FindByPage(offset int, limit int) (result []*model.TbSeckillVoucher, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbSeckillVoucherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbSeckillVoucherDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbSeckillVoucherDo) Delete(models ...*model.TbSeckillVoucher) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbSeckillVoucherDo) withDO(do gen.Dao) *tbSeckillVoucherDo {
	t.DO = *do.(*gen.DO)
	return t
}
