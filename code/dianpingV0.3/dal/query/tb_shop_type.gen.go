// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dianping/dal/model"
)

func newTbShopType(db *gorm.DB) tbShopType {
	_tbShopType := tbShopType{}

	_tbShopType.tbShopTypeDo.UseDB(db)
	_tbShopType.tbShopTypeDo.UseModel(&model.TbShopType{})

	tableName := _tbShopType.tbShopTypeDo.TableName()
	_tbShopType.ALL = field.NewAsterisk(tableName)
	_tbShopType.ID = field.NewUint64(tableName, "id")
	_tbShopType.Name = field.NewString(tableName, "name")
	_tbShopType.Icon = field.NewString(tableName, "icon")
	_tbShopType.Sort = field.NewUint64(tableName, "sort")
	_tbShopType.CreateTime = field.NewTime(tableName, "create_time")
	_tbShopType.UpdateTime = field.NewTime(tableName, "update_time")

	_tbShopType.fillFieldMap()

	return _tbShopType
}

type tbShopType struct {
	tbShopTypeDo

	ALL        field.Asterisk
	ID         field.Uint64 // 主键
	Name       field.String // 类型名称
	Icon       field.String // 图标
	Sort       field.Uint64 // 顺序
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbShopType) Table(newTableName string) *tbShopType {
	t.tbShopTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbShopType) As(alias string) *tbShopType {
	t.tbShopTypeDo.DO = *(t.tbShopTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbShopType) updateTableName(table string) *tbShopType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Icon = field.NewString(table, "icon")
	t.Sort = field.NewUint64(table, "sort")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbShopType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbShopType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["icon"] = t.Icon
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbShopType) clone(db *gorm.DB) tbShopType {
	t.tbShopTypeDo.ReplaceDB(db)
	return t
}

type tbShopTypeDo struct{ gen.DO }

type ITbShopTypeDo interface {
	gen.SubQuery
	Debug() ITbShopTypeDo
	WithContext(ctx context.Context) ITbShopTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbShopTypeDo
	Not(conds ...gen.Condition) ITbShopTypeDo
	Or(conds ...gen.Condition) ITbShopTypeDo
	Select(conds ...field.Expr) ITbShopTypeDo
	Where(conds ...gen.Condition) ITbShopTypeDo
	Order(conds ...field.Expr) ITbShopTypeDo
	Distinct(cols ...field.Expr) ITbShopTypeDo
	Omit(cols ...field.Expr) ITbShopTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITbShopTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbShopTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbShopTypeDo
	Group(cols ...field.Expr) ITbShopTypeDo
	Having(conds ...gen.Condition) ITbShopTypeDo
	Limit(limit int) ITbShopTypeDo
	Offset(offset int) ITbShopTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbShopTypeDo
	Unscoped() ITbShopTypeDo
	Create(values ...*model.TbShopType) error
	CreateInBatches(values []*model.TbShopType, batchSize int) error
	Save(values ...*model.TbShopType) error
	First() (*model.TbShopType, error)
	Take() (*model.TbShopType, error)
	Last() (*model.TbShopType, error)
	Find() ([]*model.TbShopType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbShopType, err error)
	FindInBatches(result *[]*model.TbShopType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbShopType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbShopTypeDo
	Assign(attrs ...field.AssignExpr) ITbShopTypeDo
	Joins(fields ...field.RelationField) ITbShopTypeDo
	Preload(fields ...field.RelationField) ITbShopTypeDo
	FirstOrInit() (*model.TbShopType, error)
	FirstOrCreate() (*model.TbShopType, error)
	FindByPage(offset int, limit int) (result []*model.TbShopType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbShopTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbShopTypeDo) Debug() ITbShopTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t tbShopTypeDo) WithContext(ctx context.Context) ITbShopTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbShopTypeDo) ReadDB() ITbShopTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbShopTypeDo) WriteDB() ITbShopTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbShopTypeDo) Clauses(conds ...clause.Expression) ITbShopTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbShopTypeDo) Returning(value interface{}, columns ...string) ITbShopTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbShopTypeDo) Not(conds ...gen.Condition) ITbShopTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbShopTypeDo) Or(conds ...gen.Condition) ITbShopTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbShopTypeDo) Select(conds ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbShopTypeDo) Where(conds ...gen.Condition) ITbShopTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbShopTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITbShopTypeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tbShopTypeDo) Order(conds ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbShopTypeDo) Distinct(cols ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbShopTypeDo) Omit(cols ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbShopTypeDo) Join(table schema.Tabler, on ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbShopTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbShopTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbShopTypeDo) Group(cols ...field.Expr) ITbShopTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbShopTypeDo) Having(conds ...gen.Condition) ITbShopTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbShopTypeDo) Limit(limit int) ITbShopTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbShopTypeDo) Offset(offset int) ITbShopTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbShopTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbShopTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbShopTypeDo) Unscoped() ITbShopTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbShopTypeDo) Create(values ...*model.TbShopType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbShopTypeDo) CreateInBatches(values []*model.TbShopType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbShopTypeDo) Save(values ...*model.TbShopType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbShopTypeDo) First() (*model.TbShopType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbShopType), nil
	}
}

func (t tbShopTypeDo) Take() (*model.TbShopType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbShopType), nil
	}
}

func (t tbShopTypeDo) Last() (*model.TbShopType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbShopType), nil
	}
}

func (t tbShopTypeDo) Find() ([]*model.TbShopType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbShopType), err
}

func (t tbShopTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbShopType, err error) {
	buf := make([]*model.TbShopType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbShopTypeDo) FindInBatches(result *[]*model.TbShopType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbShopTypeDo) Attrs(attrs ...field.AssignExpr) ITbShopTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbShopTypeDo) Assign(attrs ...field.AssignExpr) ITbShopTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbShopTypeDo) Joins(fields ...field.RelationField) ITbShopTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbShopTypeDo) Preload(fields ...field.RelationField) ITbShopTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbShopTypeDo) FirstOrInit() (*model.TbShopType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbShopType), nil
	}
}

func (t tbShopTypeDo) FirstOrCreate() (*model.TbShopType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbShopType), nil
	}
}

func (t tbShopTypeDo) FindByPage(offset int, limit int) (result []*model.TbShopType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbShopTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbShopTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbShopTypeDo) Delete(models ...*model.TbShopType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbShopTypeDo) withDO(do gen.Dao) *tbShopTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
