// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review/dal/model"
)

func newTbUserInfo(db *gorm.DB, opts ...gen.DOOption) tbUserInfo {
	_tbUserInfo := tbUserInfo{}

	_tbUserInfo.tbUserInfoDo.UseDB(db, opts...)
	_tbUserInfo.tbUserInfoDo.UseModel(&model.TbUserInfo{})

	tableName := _tbUserInfo.tbUserInfoDo.TableName()
	_tbUserInfo.ALL = field.NewAsterisk(tableName)
	_tbUserInfo.UserID = field.NewUint64(tableName, "user_id")
	_tbUserInfo.City = field.NewString(tableName, "city")
	_tbUserInfo.Introduce = field.NewString(tableName, "introduce")
	_tbUserInfo.Fans = field.NewUint32(tableName, "fans")
	_tbUserInfo.Followee = field.NewUint32(tableName, "followee")
	_tbUserInfo.Gender = field.NewUint32(tableName, "gender")
	_tbUserInfo.Birthday = field.NewTime(tableName, "birthday")
	_tbUserInfo.Credits = field.NewUint32(tableName, "credits")
	_tbUserInfo.Level = field.NewUint32(tableName, "level")
	_tbUserInfo.CreateTime = field.NewTime(tableName, "create_time")
	_tbUserInfo.UpdateTime = field.NewTime(tableName, "update_time")

	_tbUserInfo.fillFieldMap()

	return _tbUserInfo
}

type tbUserInfo struct {
	tbUserInfoDo

	ALL        field.Asterisk
	UserID     field.Uint64 // 主键，用户id
	City       field.String // 城市名称
	Introduce  field.String // 个人介绍，不要超过128个字符
	Fans       field.Uint32 // 粉丝数量
	Followee   field.Uint32 // 关注的人的数量
	Gender     field.Uint32 // 性别，0：男，1：女
	Birthday   field.Time   // 生日
	Credits    field.Uint32 // 积分
	Level      field.Uint32 // 会员级别，0~9级,0代表未开通会员
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbUserInfo) Table(newTableName string) *tbUserInfo {
	t.tbUserInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbUserInfo) As(alias string) *tbUserInfo {
	t.tbUserInfoDo.DO = *(t.tbUserInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbUserInfo) updateTableName(table string) *tbUserInfo {
	t.ALL = field.NewAsterisk(table)
	t.UserID = field.NewUint64(table, "user_id")
	t.City = field.NewString(table, "city")
	t.Introduce = field.NewString(table, "introduce")
	t.Fans = field.NewUint32(table, "fans")
	t.Followee = field.NewUint32(table, "followee")
	t.Gender = field.NewUint32(table, "gender")
	t.Birthday = field.NewTime(table, "birthday")
	t.Credits = field.NewUint32(table, "credits")
	t.Level = field.NewUint32(table, "level")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbUserInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbUserInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["city"] = t.City
	t.fieldMap["introduce"] = t.Introduce
	t.fieldMap["fans"] = t.Fans
	t.fieldMap["followee"] = t.Followee
	t.fieldMap["gender"] = t.Gender
	t.fieldMap["birthday"] = t.Birthday
	t.fieldMap["credits"] = t.Credits
	t.fieldMap["level"] = t.Level
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbUserInfo) clone(db *gorm.DB) tbUserInfo {
	t.tbUserInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbUserInfo) replaceDB(db *gorm.DB) tbUserInfo {
	t.tbUserInfoDo.ReplaceDB(db)
	return t
}

type tbUserInfoDo struct{ gen.DO }

type ITbUserInfoDo interface {
	gen.SubQuery
	Debug() ITbUserInfoDo
	WithContext(ctx context.Context) ITbUserInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbUserInfoDo
	WriteDB() ITbUserInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbUserInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbUserInfoDo
	Not(conds ...gen.Condition) ITbUserInfoDo
	Or(conds ...gen.Condition) ITbUserInfoDo
	Select(conds ...field.Expr) ITbUserInfoDo
	Where(conds ...gen.Condition) ITbUserInfoDo
	Order(conds ...field.Expr) ITbUserInfoDo
	Distinct(cols ...field.Expr) ITbUserInfoDo
	Omit(cols ...field.Expr) ITbUserInfoDo
	Join(table schema.Tabler, on ...field.Expr) ITbUserInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbUserInfoDo
	Group(cols ...field.Expr) ITbUserInfoDo
	Having(conds ...gen.Condition) ITbUserInfoDo
	Limit(limit int) ITbUserInfoDo
	Offset(offset int) ITbUserInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserInfoDo
	Unscoped() ITbUserInfoDo
	Create(values ...*model.TbUserInfo) error
	CreateInBatches(values []*model.TbUserInfo, batchSize int) error
	Save(values ...*model.TbUserInfo) error
	First() (*model.TbUserInfo, error)
	Take() (*model.TbUserInfo, error)
	Last() (*model.TbUserInfo, error)
	Find() ([]*model.TbUserInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbUserInfo, err error)
	FindInBatches(result *[]*model.TbUserInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbUserInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbUserInfoDo
	Assign(attrs ...field.AssignExpr) ITbUserInfoDo
	Joins(fields ...field.RelationField) ITbUserInfoDo
	Preload(fields ...field.RelationField) ITbUserInfoDo
	FirstOrInit() (*model.TbUserInfo, error)
	FirstOrCreate() (*model.TbUserInfo, error)
	FindByPage(offset int, limit int) (result []*model.TbUserInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbUserInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbUserInfoDo) Debug() ITbUserInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t tbUserInfoDo) WithContext(ctx context.Context) ITbUserInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbUserInfoDo) ReadDB() ITbUserInfoDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbUserInfoDo) WriteDB() ITbUserInfoDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbUserInfoDo) Session(config *gorm.Session) ITbUserInfoDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbUserInfoDo) Clauses(conds ...clause.Expression) ITbUserInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbUserInfoDo) Returning(value interface{}, columns ...string) ITbUserInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbUserInfoDo) Not(conds ...gen.Condition) ITbUserInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbUserInfoDo) Or(conds ...gen.Condition) ITbUserInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbUserInfoDo) Select(conds ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbUserInfoDo) Where(conds ...gen.Condition) ITbUserInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbUserInfoDo) Order(conds ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbUserInfoDo) Distinct(cols ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbUserInfoDo) Omit(cols ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbUserInfoDo) Join(table schema.Tabler, on ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbUserInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbUserInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbUserInfoDo) Group(cols ...field.Expr) ITbUserInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbUserInfoDo) Having(conds ...gen.Condition) ITbUserInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbUserInfoDo) Limit(limit int) ITbUserInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbUserInfoDo) Offset(offset int) ITbUserInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbUserInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbUserInfoDo) Unscoped() ITbUserInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbUserInfoDo) Create(values ...*model.TbUserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbUserInfoDo) CreateInBatches(values []*model.TbUserInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbUserInfoDo) Save(values ...*model.TbUserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbUserInfoDo) First() (*model.TbUserInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUserInfo), nil
	}
}

func (t tbUserInfoDo) Take() (*model.TbUserInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUserInfo), nil
	}
}

func (t tbUserInfoDo) Last() (*model.TbUserInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUserInfo), nil
	}
}

func (t tbUserInfoDo) Find() ([]*model.TbUserInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbUserInfo), err
}

func (t tbUserInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbUserInfo, err error) {
	buf := make([]*model.TbUserInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbUserInfoDo) FindInBatches(result *[]*model.TbUserInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbUserInfoDo) Attrs(attrs ...field.AssignExpr) ITbUserInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbUserInfoDo) Assign(attrs ...field.AssignExpr) ITbUserInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbUserInfoDo) Joins(fields ...field.RelationField) ITbUserInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbUserInfoDo) Preload(fields ...field.RelationField) ITbUserInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbUserInfoDo) FirstOrInit() (*model.TbUserInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUserInfo), nil
	}
}

func (t tbUserInfoDo) FirstOrCreate() (*model.TbUserInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbUserInfo), nil
	}
}

func (t tbUserInfoDo) FindByPage(offset int, limit int) (result []*model.TbUserInfo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbUserInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbUserInfoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbUserInfoDo) Delete(models ...*model.TbUserInfo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbUserInfoDo) withDO(do gen.Dao) *tbUserInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
