// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dianping/dal/model"
)

func newTbVoucher(db *gorm.DB) tbVoucher {
	_tbVoucher := tbVoucher{}

	_tbVoucher.tbVoucherDo.UseDB(db)
	_tbVoucher.tbVoucherDo.UseModel(&model.TbVoucher{})

	tableName := _tbVoucher.tbVoucherDo.TableName()
	_tbVoucher.ALL = field.NewAsterisk(tableName)
	_tbVoucher.ID = field.NewUint64(tableName, "id")
	_tbVoucher.ShopID = field.NewUint64(tableName, "shop_id")
	_tbVoucher.Title = field.NewString(tableName, "title")
	_tbVoucher.SubTitle = field.NewString(tableName, "sub_title")
	_tbVoucher.Rules = field.NewString(tableName, "rules")
	_tbVoucher.PayValue = field.NewUint64(tableName, "pay_value")
	_tbVoucher.ActualValue = field.NewInt64(tableName, "actual_value")
	_tbVoucher.Type = field.NewUint8(tableName, "type")
	_tbVoucher.Status = field.NewUint8(tableName, "status")
	_tbVoucher.CreateTime = field.NewTime(tableName, "create_time")
	_tbVoucher.UpdateTime = field.NewTime(tableName, "update_time")

	_tbVoucher.fillFieldMap()

	return _tbVoucher
}

type tbVoucher struct {
	tbVoucherDo

	ALL         field.Asterisk
	ID          field.Uint64 // 主键
	ShopID      field.Uint64 // 商铺id
	Title       field.String // 代金券标题
	SubTitle    field.String // 副标题
	Rules       field.String // 使用规则
	PayValue    field.Uint64 // 支付金额，单位是分。例如200代表2元
	ActualValue field.Int64  // 抵扣金额，单位是分。例如200代表2元
	Type        field.Uint8  // 0,普通券；1,秒杀券
	Status      field.Uint8  // 1,上架; 2,下架; 3,过期
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbVoucher) Table(newTableName string) *tbVoucher {
	t.tbVoucherDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbVoucher) As(alias string) *tbVoucher {
	t.tbVoucherDo.DO = *(t.tbVoucherDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbVoucher) updateTableName(table string) *tbVoucher {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.ShopID = field.NewUint64(table, "shop_id")
	t.Title = field.NewString(table, "title")
	t.SubTitle = field.NewString(table, "sub_title")
	t.Rules = field.NewString(table, "rules")
	t.PayValue = field.NewUint64(table, "pay_value")
	t.ActualValue = field.NewInt64(table, "actual_value")
	t.Type = field.NewUint8(table, "type")
	t.Status = field.NewUint8(table, "status")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbVoucher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbVoucher) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["shop_id"] = t.ShopID
	t.fieldMap["title"] = t.Title
	t.fieldMap["sub_title"] = t.SubTitle
	t.fieldMap["rules"] = t.Rules
	t.fieldMap["pay_value"] = t.PayValue
	t.fieldMap["actual_value"] = t.ActualValue
	t.fieldMap["type"] = t.Type
	t.fieldMap["status"] = t.Status
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbVoucher) clone(db *gorm.DB) tbVoucher {
	t.tbVoucherDo.ReplaceDB(db)
	return t
}

type tbVoucherDo struct{ gen.DO }

type ITbVoucherDo interface {
	gen.SubQuery
	Debug() ITbVoucherDo
	WithContext(ctx context.Context) ITbVoucherDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbVoucherDo
	Not(conds ...gen.Condition) ITbVoucherDo
	Or(conds ...gen.Condition) ITbVoucherDo
	Select(conds ...field.Expr) ITbVoucherDo
	Where(conds ...gen.Condition) ITbVoucherDo
	Order(conds ...field.Expr) ITbVoucherDo
	Distinct(cols ...field.Expr) ITbVoucherDo
	Omit(cols ...field.Expr) ITbVoucherDo
	Join(table schema.Tabler, on ...field.Expr) ITbVoucherDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbVoucherDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbVoucherDo
	Group(cols ...field.Expr) ITbVoucherDo
	Having(conds ...gen.Condition) ITbVoucherDo
	Limit(limit int) ITbVoucherDo
	Offset(offset int) ITbVoucherDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbVoucherDo
	Unscoped() ITbVoucherDo
	Create(values ...*model.TbVoucher) error
	CreateInBatches(values []*model.TbVoucher, batchSize int) error
	Save(values ...*model.TbVoucher) error
	First() (*model.TbVoucher, error)
	Take() (*model.TbVoucher, error)
	Last() (*model.TbVoucher, error)
	Find() ([]*model.TbVoucher, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbVoucher, err error)
	FindInBatches(result *[]*model.TbVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbVoucher) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbVoucherDo
	Assign(attrs ...field.AssignExpr) ITbVoucherDo
	Joins(fields ...field.RelationField) ITbVoucherDo
	Preload(fields ...field.RelationField) ITbVoucherDo
	FirstOrInit() (*model.TbVoucher, error)
	FirstOrCreate() (*model.TbVoucher, error)
	FindByPage(offset int, limit int) (result []*model.TbVoucher, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbVoucherDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbVoucherDo) Debug() ITbVoucherDo {
	return t.withDO(t.DO.Debug())
}

func (t tbVoucherDo) WithContext(ctx context.Context) ITbVoucherDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbVoucherDo) ReadDB() ITbVoucherDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbVoucherDo) WriteDB() ITbVoucherDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbVoucherDo) Clauses(conds ...clause.Expression) ITbVoucherDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbVoucherDo) Returning(value interface{}, columns ...string) ITbVoucherDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbVoucherDo) Not(conds ...gen.Condition) ITbVoucherDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbVoucherDo) Or(conds ...gen.Condition) ITbVoucherDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbVoucherDo) Select(conds ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbVoucherDo) Where(conds ...gen.Condition) ITbVoucherDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbVoucherDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITbVoucherDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tbVoucherDo) Order(conds ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbVoucherDo) Distinct(cols ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbVoucherDo) Omit(cols ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbVoucherDo) Join(table schema.Tabler, on ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbVoucherDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbVoucherDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbVoucherDo) Group(cols ...field.Expr) ITbVoucherDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbVoucherDo) Having(conds ...gen.Condition) ITbVoucherDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbVoucherDo) Limit(limit int) ITbVoucherDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbVoucherDo) Offset(offset int) ITbVoucherDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbVoucherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbVoucherDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbVoucherDo) Unscoped() ITbVoucherDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbVoucherDo) Create(values ...*model.TbVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbVoucherDo) CreateInBatches(values []*model.TbVoucher, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbVoucherDo) Save(values ...*model.TbVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbVoucherDo) First() (*model.TbVoucher, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucher), nil
	}
}

func (t tbVoucherDo) Take() (*model.TbVoucher, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucher), nil
	}
}

func (t tbVoucherDo) Last() (*model.TbVoucher, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucher), nil
	}
}

func (t tbVoucherDo) Find() ([]*model.TbVoucher, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbVoucher), err
}

func (t tbVoucherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbVoucher, err error) {
	buf := make([]*model.TbVoucher, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbVoucherDo) FindInBatches(result *[]*model.TbVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbVoucherDo) Attrs(attrs ...field.AssignExpr) ITbVoucherDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbVoucherDo) Assign(attrs ...field.AssignExpr) ITbVoucherDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbVoucherDo) Joins(fields ...field.RelationField) ITbVoucherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbVoucherDo) Preload(fields ...field.RelationField) ITbVoucherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbVoucherDo) FirstOrInit() (*model.TbVoucher, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucher), nil
	}
}

func (t tbVoucherDo) FirstOrCreate() (*model.TbVoucher, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbVoucher), nil
	}
}

func (t tbVoucherDo) FindByPage(offset int, limit int) (result []*model.TbVoucher, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbVoucherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbVoucherDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbVoucherDo) Delete(models ...*model.TbVoucher) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbVoucherDo) withDO(do gen.Dao) *tbVoucherDo {
	t.DO = *do.(*gen.DO)
	return t
}
