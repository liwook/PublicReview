// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dianping/dal/model"
)

func newTbBlogComment(db *gorm.DB) tbBlogComment {
	_tbBlogComment := tbBlogComment{}

	_tbBlogComment.tbBlogCommentDo.UseDB(db)
	_tbBlogComment.tbBlogCommentDo.UseModel(&model.TbBlogComment{})

	tableName := _tbBlogComment.tbBlogCommentDo.TableName()
	_tbBlogComment.ALL = field.NewAsterisk(tableName)
	_tbBlogComment.ID = field.NewUint64(tableName, "id")
	_tbBlogComment.UserID = field.NewUint64(tableName, "user_id")
	_tbBlogComment.BlogID = field.NewUint64(tableName, "blog_id")
	_tbBlogComment.ParentID = field.NewUint64(tableName, "parent_id")
	_tbBlogComment.AnswerID = field.NewUint64(tableName, "answer_id")
	_tbBlogComment.Content = field.NewString(tableName, "content")
	_tbBlogComment.Liked = field.NewUint64(tableName, "liked")
	_tbBlogComment.Status = field.NewUint8(tableName, "status")
	_tbBlogComment.CreateTime = field.NewTime(tableName, "create_time")
	_tbBlogComment.UpdateTime = field.NewTime(tableName, "update_time")

	_tbBlogComment.fillFieldMap()

	return _tbBlogComment
}

type tbBlogComment struct {
	tbBlogCommentDo

	ALL        field.Asterisk
	ID         field.Uint64 // 主键
	UserID     field.Uint64 // 用户id
	BlogID     field.Uint64 // 探店id
	ParentID   field.Uint64 // 关联的1级评论id，如果是一级评论，则值为0
	AnswerID   field.Uint64 // 回复的评论id
	Content    field.String // 回复的内容
	Liked      field.Uint64 // 点赞数
	Status     field.Uint8  // 状态，0：正常，1：被举报，2：禁止查看
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbBlogComment) Table(newTableName string) *tbBlogComment {
	t.tbBlogCommentDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbBlogComment) As(alias string) *tbBlogComment {
	t.tbBlogCommentDo.DO = *(t.tbBlogCommentDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbBlogComment) updateTableName(table string) *tbBlogComment {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.UserID = field.NewUint64(table, "user_id")
	t.BlogID = field.NewUint64(table, "blog_id")
	t.ParentID = field.NewUint64(table, "parent_id")
	t.AnswerID = field.NewUint64(table, "answer_id")
	t.Content = field.NewString(table, "content")
	t.Liked = field.NewUint64(table, "liked")
	t.Status = field.NewUint8(table, "status")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbBlogComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbBlogComment) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["blog_id"] = t.BlogID
	t.fieldMap["parent_id"] = t.ParentID
	t.fieldMap["answer_id"] = t.AnswerID
	t.fieldMap["content"] = t.Content
	t.fieldMap["liked"] = t.Liked
	t.fieldMap["status"] = t.Status
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbBlogComment) clone(db *gorm.DB) tbBlogComment {
	t.tbBlogCommentDo.ReplaceDB(db)
	return t
}

type tbBlogCommentDo struct{ gen.DO }

type ITbBlogCommentDo interface {
	gen.SubQuery
	Debug() ITbBlogCommentDo
	WithContext(ctx context.Context) ITbBlogCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbBlogCommentDo
	Not(conds ...gen.Condition) ITbBlogCommentDo
	Or(conds ...gen.Condition) ITbBlogCommentDo
	Select(conds ...field.Expr) ITbBlogCommentDo
	Where(conds ...gen.Condition) ITbBlogCommentDo
	Order(conds ...field.Expr) ITbBlogCommentDo
	Distinct(cols ...field.Expr) ITbBlogCommentDo
	Omit(cols ...field.Expr) ITbBlogCommentDo
	Join(table schema.Tabler, on ...field.Expr) ITbBlogCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbBlogCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbBlogCommentDo
	Group(cols ...field.Expr) ITbBlogCommentDo
	Having(conds ...gen.Condition) ITbBlogCommentDo
	Limit(limit int) ITbBlogCommentDo
	Offset(offset int) ITbBlogCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbBlogCommentDo
	Unscoped() ITbBlogCommentDo
	Create(values ...*model.TbBlogComment) error
	CreateInBatches(values []*model.TbBlogComment, batchSize int) error
	Save(values ...*model.TbBlogComment) error
	First() (*model.TbBlogComment, error)
	Take() (*model.TbBlogComment, error)
	Last() (*model.TbBlogComment, error)
	Find() ([]*model.TbBlogComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbBlogComment, err error)
	FindInBatches(result *[]*model.TbBlogComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbBlogComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbBlogCommentDo
	Assign(attrs ...field.AssignExpr) ITbBlogCommentDo
	Joins(fields ...field.RelationField) ITbBlogCommentDo
	Preload(fields ...field.RelationField) ITbBlogCommentDo
	FirstOrInit() (*model.TbBlogComment, error)
	FirstOrCreate() (*model.TbBlogComment, error)
	FindByPage(offset int, limit int) (result []*model.TbBlogComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbBlogCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbBlogCommentDo) Debug() ITbBlogCommentDo {
	return t.withDO(t.DO.Debug())
}

func (t tbBlogCommentDo) WithContext(ctx context.Context) ITbBlogCommentDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbBlogCommentDo) ReadDB() ITbBlogCommentDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbBlogCommentDo) WriteDB() ITbBlogCommentDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbBlogCommentDo) Clauses(conds ...clause.Expression) ITbBlogCommentDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbBlogCommentDo) Returning(value interface{}, columns ...string) ITbBlogCommentDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbBlogCommentDo) Not(conds ...gen.Condition) ITbBlogCommentDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbBlogCommentDo) Or(conds ...gen.Condition) ITbBlogCommentDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbBlogCommentDo) Select(conds ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbBlogCommentDo) Where(conds ...gen.Condition) ITbBlogCommentDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbBlogCommentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITbBlogCommentDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tbBlogCommentDo) Order(conds ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbBlogCommentDo) Distinct(cols ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbBlogCommentDo) Omit(cols ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbBlogCommentDo) Join(table schema.Tabler, on ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbBlogCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbBlogCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbBlogCommentDo) Group(cols ...field.Expr) ITbBlogCommentDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbBlogCommentDo) Having(conds ...gen.Condition) ITbBlogCommentDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbBlogCommentDo) Limit(limit int) ITbBlogCommentDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbBlogCommentDo) Offset(offset int) ITbBlogCommentDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbBlogCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbBlogCommentDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbBlogCommentDo) Unscoped() ITbBlogCommentDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbBlogCommentDo) Create(values ...*model.TbBlogComment) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbBlogCommentDo) CreateInBatches(values []*model.TbBlogComment, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbBlogCommentDo) Save(values ...*model.TbBlogComment) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbBlogCommentDo) First() (*model.TbBlogComment, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbBlogComment), nil
	}
}

func (t tbBlogCommentDo) Take() (*model.TbBlogComment, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbBlogComment), nil
	}
}

func (t tbBlogCommentDo) Last() (*model.TbBlogComment, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbBlogComment), nil
	}
}

func (t tbBlogCommentDo) Find() ([]*model.TbBlogComment, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbBlogComment), err
}

func (t tbBlogCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbBlogComment, err error) {
	buf := make([]*model.TbBlogComment, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbBlogCommentDo) FindInBatches(result *[]*model.TbBlogComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbBlogCommentDo) Attrs(attrs ...field.AssignExpr) ITbBlogCommentDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbBlogCommentDo) Assign(attrs ...field.AssignExpr) ITbBlogCommentDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbBlogCommentDo) Joins(fields ...field.RelationField) ITbBlogCommentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbBlogCommentDo) Preload(fields ...field.RelationField) ITbBlogCommentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbBlogCommentDo) FirstOrInit() (*model.TbBlogComment, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbBlogComment), nil
	}
}

func (t tbBlogCommentDo) FirstOrCreate() (*model.TbBlogComment, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbBlogComment), nil
	}
}

func (t tbBlogCommentDo) FindByPage(offset int, limit int) (result []*model.TbBlogComment, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbBlogCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbBlogCommentDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbBlogCommentDo) Delete(models ...*model.TbBlogComment) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbBlogCommentDo) withDO(do gen.Dao) *tbBlogCommentDo {
	t.DO = *do.(*gen.DO)
	return t
}
