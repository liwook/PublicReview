// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dianping/dal/model"
)

func newTbFollow(db *gorm.DB) tbFollow {
	_tbFollow := tbFollow{}

	_tbFollow.tbFollowDo.UseDB(db)
	_tbFollow.tbFollowDo.UseModel(&model.TbFollow{})

	tableName := _tbFollow.tbFollowDo.TableName()
	_tbFollow.ALL = field.NewAsterisk(tableName)
	_tbFollow.ID = field.NewInt64(tableName, "id")
	_tbFollow.UserID = field.NewUint64(tableName, "user_id")
	_tbFollow.FollowUserID = field.NewUint64(tableName, "follow_user_id")
	_tbFollow.CreateTime = field.NewTime(tableName, "create_time")

	_tbFollow.fillFieldMap()

	return _tbFollow
}

type tbFollow struct {
	tbFollowDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键
	UserID       field.Uint64 // 用户id
	FollowUserID field.Uint64 // 关联的用户id
	CreateTime   field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (t tbFollow) Table(newTableName string) *tbFollow {
	t.tbFollowDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbFollow) As(alias string) *tbFollow {
	t.tbFollowDo.DO = *(t.tbFollowDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbFollow) updateTableName(table string) *tbFollow {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UserID = field.NewUint64(table, "user_id")
	t.FollowUserID = field.NewUint64(table, "follow_user_id")
	t.CreateTime = field.NewTime(table, "create_time")

	t.fillFieldMap()

	return t
}

func (t *tbFollow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbFollow) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["follow_user_id"] = t.FollowUserID
	t.fieldMap["create_time"] = t.CreateTime
}

func (t tbFollow) clone(db *gorm.DB) tbFollow {
	t.tbFollowDo.ReplaceDB(db)
	return t
}

type tbFollowDo struct{ gen.DO }

type ITbFollowDo interface {
	gen.SubQuery
	Debug() ITbFollowDo
	WithContext(ctx context.Context) ITbFollowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbFollowDo
	Not(conds ...gen.Condition) ITbFollowDo
	Or(conds ...gen.Condition) ITbFollowDo
	Select(conds ...field.Expr) ITbFollowDo
	Where(conds ...gen.Condition) ITbFollowDo
	Order(conds ...field.Expr) ITbFollowDo
	Distinct(cols ...field.Expr) ITbFollowDo
	Omit(cols ...field.Expr) ITbFollowDo
	Join(table schema.Tabler, on ...field.Expr) ITbFollowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbFollowDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbFollowDo
	Group(cols ...field.Expr) ITbFollowDo
	Having(conds ...gen.Condition) ITbFollowDo
	Limit(limit int) ITbFollowDo
	Offset(offset int) ITbFollowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbFollowDo
	Unscoped() ITbFollowDo
	Create(values ...*model.TbFollow) error
	CreateInBatches(values []*model.TbFollow, batchSize int) error
	Save(values ...*model.TbFollow) error
	First() (*model.TbFollow, error)
	Take() (*model.TbFollow, error)
	Last() (*model.TbFollow, error)
	Find() ([]*model.TbFollow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbFollow, err error)
	FindInBatches(result *[]*model.TbFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbFollow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbFollowDo
	Assign(attrs ...field.AssignExpr) ITbFollowDo
	Joins(fields ...field.RelationField) ITbFollowDo
	Preload(fields ...field.RelationField) ITbFollowDo
	FirstOrInit() (*model.TbFollow, error)
	FirstOrCreate() (*model.TbFollow, error)
	FindByPage(offset int, limit int) (result []*model.TbFollow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbFollowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbFollowDo) Debug() ITbFollowDo {
	return t.withDO(t.DO.Debug())
}

func (t tbFollowDo) WithContext(ctx context.Context) ITbFollowDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbFollowDo) ReadDB() ITbFollowDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbFollowDo) WriteDB() ITbFollowDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbFollowDo) Clauses(conds ...clause.Expression) ITbFollowDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbFollowDo) Returning(value interface{}, columns ...string) ITbFollowDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbFollowDo) Not(conds ...gen.Condition) ITbFollowDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbFollowDo) Or(conds ...gen.Condition) ITbFollowDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbFollowDo) Select(conds ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbFollowDo) Where(conds ...gen.Condition) ITbFollowDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbFollowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITbFollowDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tbFollowDo) Order(conds ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbFollowDo) Distinct(cols ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbFollowDo) Omit(cols ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbFollowDo) Join(table schema.Tabler, on ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbFollowDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbFollowDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbFollowDo) Group(cols ...field.Expr) ITbFollowDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbFollowDo) Having(conds ...gen.Condition) ITbFollowDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbFollowDo) Limit(limit int) ITbFollowDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbFollowDo) Offset(offset int) ITbFollowDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbFollowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbFollowDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbFollowDo) Unscoped() ITbFollowDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbFollowDo) Create(values ...*model.TbFollow) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbFollowDo) CreateInBatches(values []*model.TbFollow, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbFollowDo) Save(values ...*model.TbFollow) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbFollowDo) First() (*model.TbFollow, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbFollow), nil
	}
}

func (t tbFollowDo) Take() (*model.TbFollow, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbFollow), nil
	}
}

func (t tbFollowDo) Last() (*model.TbFollow, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbFollow), nil
	}
}

func (t tbFollowDo) Find() ([]*model.TbFollow, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbFollow), err
}

func (t tbFollowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbFollow, err error) {
	buf := make([]*model.TbFollow, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbFollowDo) FindInBatches(result *[]*model.TbFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbFollowDo) Attrs(attrs ...field.AssignExpr) ITbFollowDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbFollowDo) Assign(attrs ...field.AssignExpr) ITbFollowDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbFollowDo) Joins(fields ...field.RelationField) ITbFollowDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbFollowDo) Preload(fields ...field.RelationField) ITbFollowDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbFollowDo) FirstOrInit() (*model.TbFollow, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbFollow), nil
	}
}

func (t tbFollowDo) FirstOrCreate() (*model.TbFollow, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbFollow), nil
	}
}

func (t tbFollowDo) FindByPage(offset int, limit int) (result []*model.TbFollow, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbFollowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbFollowDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbFollowDo) Delete(models ...*model.TbFollow) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbFollowDo) withDO(do gen.Dao) *tbFollowDo {
	t.DO = *do.(*gen.DO)
	return t
}
